import datetime

from aiogram import types, Router, Bot, F
from aiogram.fsm.context import FSMContext

from app.config import settings
from app.database import storage
from app.handlers.personal import stateforms
from app.handlers import personal

router = Router()


@router.callback_query(F.data == "personal:set_nickname::::")
async def set_nickname_callback(callback: types.CallbackQuery, bot: Bot, state: FSMContext) -> None:
    text = "–û–±—Ä–∞—â–∞—é –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –±–æ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –≤–∞–º. –ü—Ä–æ—Å—å–±–∞ —Å–æ–±–ª—é–¥–∞—Ç—å –ø—Ä–∏–ª–∏—á–∏–µüòè"
    await callback.answer(text=text,
                          show_alert=True)
    await bot.send_message(chat_id=callback.from_user.id,
                           text="–ö–∞–∫–æ–π –Ω–∏–∫–Ω–µ–π–º —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å?")
    await state.set_state(stateforms.SetNickname.NICKNAME)


@router.message(stateforms.SetNickname.NICKNAME)
async def set_nickname(message: types.Message, bot: Bot) -> None:
    nickname = message.text
    if message.from_user and nickname:
        await storage.update_user(user_id=message.from_user.id, nickname=nickname)
        await bot.send_message(chat_id=message.from_user.id,
                               text=f"–ù–∏–∫–Ω–µ–π–º {nickname} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")


@router.callback_query(F.data == "personal::set_birthday:::")
async def set_birthday_callback(callback: types.CallbackQuery, bot: Bot, state: FSMContext) -> None:
    await callback.answer("–î–∞–≤–∞–π—Ç–µ –∑–∞–¥–∞–¥–∏–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è")
    await bot.send_message(chat_id=callback.from_user.id,
                           text="–ö–∞–∫—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–¥-–º–º-–≥–≥–≥–≥")
    await state.set_state(stateforms.SetBirthday.BIRTHDAY)


@router.message(stateforms.SetBirthday.BIRTHDAY)
async def set_birthday(message: types.Message, bot: Bot) -> None:
    if message.text:
        birthday_date = datetime.datetime.strptime(message.text, "%d-%m-%Y").date()
        if birthday_date > datetime.date.today():
            await message.answer(
                text="–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ –±—É–¥—É—â–µ–≥–æ. –ò–Ω—Ç—Ä–∏–≥—É—é—â–µ, –Ω–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æüòâ")
            return None

        if message.from_user:
            await storage.update_user(user_id=message.from_user.id, birthday=birthday_date)
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f"–í–∞—à –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {message.text} –¥–æ–±–∞–≤–ª–µ–Ω")


@router.callback_query(F.data == "personal:::about_me::")
async def about_me_callback(callback: types.CallbackQuery, bot: Bot) -> None:
    await callback.answer(text="–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
    await bot.send_message(chat_id=callback.from_user.id,
                           text="–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                           reply_markup=personal.about_me_keyboard())


@router.callback_query(F.data == "personal::::delete_user:")
async def delete_user_callback(callback: types.CallbackQuery, bot: Bot, state: FSMContext) -> None:
    await callback.answer(text="–£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã!",
                          show_alert=True)
    await bot.send_message(chat_id=callback.from_user.id,
                           text="–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å? –û—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞', –µ—Å–ª–∏ —ç—Ç–æ —Ç–∞–∫")
    await state.set_state(stateforms.DeleteUser.DELETE)


@router.message(stateforms.DeleteUser.DELETE)
async def delete_user(message: types.Message, bot: Bot) -> None:
    if message.text and message.text.lower() == "–¥–∞" and message.from_user:
        await storage.update_user(user_id=message.from_user.id,
                                  deleted_date=datetime.datetime.now(tz=datetime.timezone.utc))
        photo = types.FSInputFile(settings.STATIC_STORAGE / "sadness.webp")
        await bot.send_photo(chat_id=message.from_user.id,
                             photo=photo,
                             caption="–ú—ã –±—É–¥–µ–º —Å–∫—É—á–∞—Ç—åü•≤")


@router.callback_query(F.data == "personal:::::restore_user")
async def restore_user_callback(callback: types.CallbackQuery, bot: Bot) -> None:
    await callback.answer(text="–ú—ã —Ä–∞–¥–∏, —á—Ç–æ –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å! –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                          show_alert=True)
    await storage.update_user(user_id=callback.from_user.id, deleted_date=None)
    photo = types.FSInputFile(settings.STATIC_STORAGE / "happy.webp")
    await bot.send_photo(chat_id=callback.from_user.id,
                         photo=photo,
                         caption="–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
