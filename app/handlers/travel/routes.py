from datetime import datetime

from aiogram import types, Router, Bot, F
from aiogram.fsm.context import FSMContext
from jinja2 import Template

from app import exceptions
from app.database import storage
from app.external.geodata import geocoding, distance
from app.handlers import travel
from app.utils import funcs

router = Router()


@router.callback_query(F.data == "travel:add_travel::")
async def add_travel_callback(callback: types.CallbackQuery, bot: Bot, state: FSMContext) -> None:
    await callback.answer("–ü—Ä–∏—Å—Ç—É–ø–∏–º!")
    await bot.send_message(chat_id=callback.from_user.id,
                           text="–ö–∞–∫–æ–π –ø–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥?")
    await state.set_state(travel.LoadTrip.FIRST_PLACE)


@router.message(travel.LoadTrip.FIRST_PLACE)
async def get_first_place(message: types.Message, state: FSMContext) -> None:
    first_place = message.text
    await message.answer(f"–ü–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥ - {first_place}. –ö–∞–∫–æ–∏ÃÜ –≤—Ç–æ—Ä–æ–π –≥–æ—Ä–æ–¥?")
    await state.update_data(first_place=first_place)
    await state.set_state(travel.LoadTrip.LAST_PLACE)


@router.message(travel.LoadTrip.LAST_PLACE)
async def get_second_place(message: types.Message, state: FSMContext) -> None:
    second_place = message.text
    current_state: dict = await state.get_data()
    if second_place == current_state["first_place"]:
        await message.answer(text="–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –º–µ—Å—Ç–∞–º–∏")
        return None

    await message.answer(f"–í—Ç–æ—Ä–æ–π –≥–æ—Ä–æ–¥ - {second_place}. –ö–∞–∫–æ–∏ÃÜ –≤–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞?",
                         reply_markup=travel.transport_type_keyboard())
    await state.update_data(second_place=second_place)
    await state.set_state(travel.LoadTrip.TRANSPORT_TYPE)


@router.message(travel.LoadTrip.TRANSPORT_TYPE)
async def get_transport_type(message: types.Message, state: FSMContext) -> None:
    transport = message.text
    await message.answer(f"–í–∏–¥ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ - {transport}. –í –∫–∞–∫–æ–º –≥–æ–¥—É –±—ã–ª–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ?")
    await state.update_data(transport=transport)
    await state.set_state(travel.LoadTrip.TRAVEL_YEAR)


@router.message(travel.LoadTrip.TRAVEL_YEAR)
async def get_travel_year(message: types.Message, state: FSMContext) -> None:
    year = message.text
    if year and int(year) > datetime.now().year:
        await message.answer("–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –±—É–¥—É—â–µ–º. –ü–æ—Ö–≤–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
        await state.clear()

    await message.answer(f"–ì–æ–¥ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è - {year}.")
    await state.update_data(year=year)

    travel_schema = travel.NewTravelContext(**await state.get_data())

    try:
        first_place_data = await geocoding.get_geographic_data(city=travel_schema.first_place)
        second_place_data = await geocoding.get_geographic_data(city=travel_schema.second_place)
    except exceptions.NoGeographicDataException as err:
        await message.answer(text=f"{err.message}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫, –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return None
    except exceptions.ExternalServiceError:
        await message.answer(text="–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        return None

    trip_distance = await distance.get_distance(lat_1=first_place_data.latitude,
                                                long_1=first_place_data.longitude,
                                                lat_2=second_place_data.latitude,
                                                long_2=second_place_data.longitude)
    my_travel = travel.AddTravelSchema(
        distance=trip_distance["distance"],
        transport_type=travel_schema.transport,
        travel_year=travel_schema.year,
        user_id=message.from_user.id,  # type: ignore
        location=travel.LocationSchema(
            from_=travel.PointSchema(
                town=travel_schema.first_place,
                country=first_place_data.country,
            ),
            to=travel.PointSchema(
                town=travel_schema.second_place,
                country=second_place_data.country,
            )
        )
    )

    await storage.add_new_travel(new_travel_schema=my_travel)
    response = f"""
    *–ù–æ–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ:*
    –ò–∑ {my_travel.location.from_.town}, {my_travel.location.from_.country}
    –í {my_travel.location.to.town}, {my_travel.location.to.country} 
    —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æüëç
    """
    await message.answer(text=response,
                         parse_mode="Markdown")
    await state.clear()
    await message.answer(text="–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ?",
                         reply_markup=travel.one_more_travel_keyboard())


@router.callback_query(F.data == "travel::get_travel:")
async def get_travel_callback(callback: types.CallbackQuery) -> None:
    if isinstance(callback.message, types.Message):
        await callback.message.edit_caption(caption="–ß—É—Ç—å-—á—É—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–πüòå",
                                            reply_markup=travel.get_travel_keyboard())


@router.callback_query(F.data == "my_travel:get_travel:::")
async def get_all_travels_callback(callback: types.CallbackQuery, bot: Bot) -> None:
    all_travels = [
        travel.GetTravelSchema(
            travel_id=travels.travel_id,
            distance=travels.distance,
            transport_type=travels.transport_type,
            travel_year=travels.travel_year,
            location=travels.location,  # type: ignore
        ) for travels in await storage.get_all_travels(user_id=callback.from_user.id)
    ]

    response = "\n\n".join(
        f"*TravelID:* {item.travel_id}\n"
        f"*From:* {item.location.from_.town}, {item.location.from_.country}\n"
        f"*To:* {item.location.to.town}, {item.location.to.country}\n"
        f"*Distance:* {item.distance}\n"
        f"*Transport type:* {item.transport_type}\n"
        f"*Year:* {item.travel_year}"
        for item in all_travels
    )

    await funcs.send_long_message(chat_id=callback.from_user.id,
                                  text=response,
                                  bot=bot,
                                  parse_mode="Markdown")


@router.callback_query(F.data == "my_travel::get_distance::")
async def get_distance_callback(callback: types.CallbackQuery, bot: Bot) -> None:
    air_distance = await storage.get_distance(user_id=callback.from_user.id,
                                              transport_type="–í–æ–∑–¥—É—à–Ω—ã–π")
    ground_distance = await storage.get_distance(user_id=callback.from_user.id,
                                                 transport_type="–ù–∞–∑–µ–º–Ω—ã–π")
    template = Template("""
    <b>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏</b>:
    <b>–î–∏—Å—Ç–∞–Ω—Ü–∏—è –ø–æ –≤–æ–∑–¥—É—Ö—É:</b> {{ air_distance }} –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤
    <b>–î–∏—Å—Ç–∞–Ω—Ü–∏—è –ø–æ –∑–µ–º–ª–µ:</b> {{ ground_distance }} –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤
    <b>–û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è:</b> {{ result }} –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤
    """) if air_distance or ground_distance else Template("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–πüò¢")
    response = template.render(air_distance=air_distance,
                               ground_distance=ground_distance,
                               result=air_distance + ground_distance)
    await callback.answer(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
    await bot.send_message(chat_id=callback.from_user.id,
                           text=response,
                           parse_mode="HTML")


@router.callback_query(F.data == "my_travel:::get_country:")
async def get_country_callback(callback: types.CallbackQuery, bot: Bot) -> None:
    countries = await storage.get_all_countries(user_id=callback.from_user.id)
    template = Template("""
    <b>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∞–º</b>:{% for country in countries %}
    {{ loop.index }}.{{ country[0] }}{% endfor %}
    """) if countries else Template("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–πüò¢")
    response = template.render(countries=countries)
    await callback.answer(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
    await bot.send_message(chat_id=callback.from_user.id,
                           text=response,
                           parse_mode="HTML")


@router.callback_query(F.data == "my_travel::::get_detail")
async def get_detail_callback(callback: types.CallbackQuery, bot: Bot) -> None:
    air_distance = await storage.get_distance(user_id=callback.from_user.id,
                                              transport_type="–í–æ–∑–¥—É—à–Ω—ã–π")
    ground_distance = await storage.get_distance(user_id=callback.from_user.id,
                                                 transport_type="–ù–∞–∑–µ–º–Ω—ã–π")
    air_travel_count = await storage.get_travel_count(user_id=callback.from_user.id,
                                                      transport_type="–í–æ–∑–¥—É—à–Ω—ã–π")
    ground_travel_count = await storage.get_travel_count(user_id=callback.from_user.id,
                                                         transport_type="–ù–∞–∑–µ–º–Ω—ã–π")
    all_countries = await storage.get_all_countries(user_id=callback.from_user.id)
    template = Template("""
        <b>–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö</b>:
        <b>–í—Å–µ–≥–æ —Å–æ–≤–µ—Ä—à–µ–Ω–æ:</b> {{ total_travel }} –ø–æ–µ–∑–¥–æ–∫, –æ–±—â–µ–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–µ–π {{ total_distance }} –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤
        <b>–ò–∑ –Ω–∏—Ö –ø–æ –∑–µ–º–ª–µ:</b> {{ ground_travel_count }} –ø–æ–µ–∑–¥–æ–∫, –¥–∏—Å—Ç–∞–Ω—Ü–∏—è {{ ground_distance }} –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤
        <b>–ü–æ –≤–æ–∑–¥—É—Ö—É:</b> {{ air_travel_count }} –ø–æ–µ–∑–¥–æ–∫, –¥–∏—Å—Ç–∞–Ω—Ü–∏—è {{ air_distance }} –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤
        <b>–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω –ø–æ—Å–µ—Ç–∏–ª:</b> {{ total_country_count }} —Å—Ç—Ä–∞–Ω
        """) if air_distance or ground_distance else Template("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–πüò¢")
    response = template.render(total_travel=air_travel_count + ground_travel_count,
                               total_distance=air_distance + ground_distance,
                               ground_travel_count=ground_travel_count,
                               ground_distance=ground_distance,
                               air_travel_count=air_travel_count,
                               air_distance=air_distance,
                               total_country_count=len(all_countries))
    await callback.answer(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
    await bot.send_message(chat_id=callback.from_user.id,
                           text=response,
                           parse_mode="HTML")


@router.callback_query(F.data == "travel:::delete_travel")
async def delete_travel_callback(callback: types.CallbackQuery, bot: Bot, state: FSMContext) -> None:
    await callback.answer("–£–¥–∞–ª—è–µ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ. –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã!")
    await bot.send_message(chat_id=callback.from_user.id,
                           text="–í–≤–µ–¥–∏—Ç–µ TravelID –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å")
    await state.set_state(travel.DeleteTrip.TRAVEL_ID)


@router.message(travel.DeleteTrip.TRAVEL_ID)
async def delete_travel(message: types.Message) -> None:
    if message.from_user and message.text:
        travel_id = int(message.text)
        travel = await storage.get_travel_by_id(travel_id=travel_id)
        if not travel:
            await message.answer(text=f"–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —Å TravelID {travel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return None

        if travel.deleted_date:
            await message.answer(text=f"–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —Å TravelID {travel_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ")
            return None

        await storage.delete_travel(travel_id=travel_id, user_id=message.from_user.id)
        await message.answer(text=f"–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —Å TravelID {travel_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
